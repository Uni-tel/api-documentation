"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[219],{888:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"csta-api/csta-tcp-xml-api","title":"CSTA TCP client API","description":"This API uses XML over TCP like a classic physical telephony server. The client can be written in any","source":"@site/docs/csta-api/csta-tcp-xml-api.md","sourceDirName":"csta-api","slug":"/csta-api/csta-tcp-xml-api","permalink":"/api-documentation/docs/csta-api/csta-tcp-xml-api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"CSTA SignalR client API","permalink":"/api-documentation/docs/csta-api/csta-signalr-json"},"next":{"title":"How to use","permalink":"/api-documentation/docs/uni-connect/how-to-use"}}');var i=t(4848),s=t(8453);const r={sidebar_position:3},c="CSTA TCP client API",o={},l=[{value:"How to use",id:"how-to-use",level:2},{value:".NET sample client",id:"net-sample-client",level:2},{value:"Example XML requests",id:"example-xml-requests",level:3},{value:"Get access to uni-tel CSTA TCP API",id:"get-access-to-uni-tel-csta-tcp-api",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"csta-tcp-client-api",children:"CSTA TCP client API"})}),"\n",(0,i.jsx)(n.p,{children:"This API uses XML over TCP like a classic physical telephony server. The client can be written in any\nprogramming language that supports creating a TCP socket."}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The TCP client support XML requests, responses and events. They follow the CSTA format in the ",(0,i.jsx)(n.a,{href:"https://www.ecma-international.org/wp-content/uploads/ECMA-323_6th_edition_december_2011.pdf",children:"ECMA-323 CSTA Standard"}),"."]})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open a TCP socket."}),"\n",(0,i.jsx)(n.li,{children:"Authentication: Login by sending a CSTA StartApplicationSession request in XML format (as a string) to the socket."}),"\n",(0,i.jsx)(n.li,{children:"CSTA request, responses and CSTA events are received as strings from the TCP socket. You need to split up the received text into XML document strings and then deserialized into a typed object if needed."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"net-sample-client",children:".NET sample client"}),"\n",(0,i.jsxs)(n.p,{children:["The C# sample client is written for .NET Core 6 using the ",(0,i.jsx)(n.a,{href:"https://github.com/chronoxor/NetCoreServer",children:"NetCoreServer"})," library available at nuget."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class TcpClient : NetCoreServer.TcpClient\n    {\n        private const string MESSAGE_TERMINATOR = "\\0";\n\n        private readonly Action<object> _newMessageFunc;\n        private readonly Serializer _serializer;\n        private string _dataReceived = string.Empty;\n\n        public TcpClient(Action<object> newMessageFunc, string address, int port) : base(address, port)\n        {\n            _newMessageFunc = newMessageFunc;\n            _serializer = new Serializer();\n        }\n\n        public void SendAsync<T>(T message)\n        {\n            Console.WriteLine($"Sending {message.GetType()} message ");\n\n            base.SendAsync(_serializer.Serialize(message) + MESSAGE_TERMINATOR);\n        }\n\n        protected override void OnConnected()\n        {\n            Console.WriteLine($"TcpClient connected");\n\n            ReceiveAsync();\n\n            base.OnConnected();\n        }\n\n        protected override void OnDisconnected()\n        {\n            Console.WriteLine($"TcpClient disconnected");\n\n            base.OnDisconnected();\n        }\n\n        protected override void OnReceived(byte[] buffer, long offset, long size)\n        {\n            var chunk = Encoding.UTF8.GetString(buffer, (int)offset, (int)size);\n            _dataReceived += chunk;\n\n            while (_dataReceived.Contains(MESSAGE_TERMINATOR))\n            {\n                var index = _dataReceived.IndexOf(MESSAGE_TERMINATOR, StringComparison.Ordinal);\n                var message = _dataReceived.Substring(0, index);\n                _dataReceived = _dataReceived.Substring(index + 1);\n\n                try\n                {\n                    var convertedMessage = _serializer.Deserialize(message);\n                    _newMessageFunc(convertedMessage);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($"Invalid XML document? Exception: {ex.Message}. XML = {message}");\n                }\n            }\n        }\n\n        protected override void OnError(SocketError error)\n        {\n            Console.WriteLine($"TCP client returned error code: \'{error}\'");\n        }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-xml-requests",children:"Example XML requests"}),"\n",(0,i.jsx)(n.p,{children:"This example connects to the CSTA server and then sends a MakeCall request. Local number 200 calls 22334455."}),"\n",(0,i.jsx)(n.p,{children:"Send TCP string:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:'title="StartApplicationSession request"',children:'<?xml version="1.0" encoding="utf-16"?>\n<StartApplicationSession>\n  <applicationInfo>\n    <applicationSpecificInfo>\n      <vendorData:userID>bill@uni-tel.dk</vendorData:userID>\n        <vendorData:password>*******<vendorData:password>\n        <vendorData:pbxDomain>22334455.pbx.one-connect.dk</vendorData:pbxDomain>\n      </applicationSpecificInfo>\n    </applicationInfo>\n  <requestedSessionDuration>120</requestedSessionDuration>\n</StartApplicationSession>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Wait for a response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:'title="StartApplicationSession response"',children:'<StartApplicationSessionPosResponse xmlns="http://www.ecma.ch/standards/ecma-323/csta/ed6">\n  <sessionID>HotFShcrHZWUfc6tMIjD0A</sessionID>\n  <actualProtocolVersion>http://www.ecma.ch/standards/ecma-323/csta/ed6</actualProtocolVersion>\n  <actualSessionDuration>120</actualSessionDuration>\n</StartApplicationSessionPosResponse>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Send TCP string:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:'title="MakeCall request"',children:"<MakeCall>\n  <callingDevice>200</callingDevice>\n  <calledDirectoryNumber>22334455</calledDirectoryNumber>\n  <autoOriginate>doNotPrompt</autoOriginate>\n  <privateData>\n    <requestID>155-a04dbfd1-ec67-4637-93b8-8248f13fe691</requestID>\n  </privateData>\n</MakeCall>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Wait for a response like"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:'title="MakeCall response"',children:'<MakeCallResponse xmlns="http://www.ecma.ch/standards/ecma-323/csta/ed6">\n  <privateData>\n    <requestID>155-a04dbfd1-ec67-4637-93b8-8248f13fe691</requestID>\n  </privateData>\n  <callingDevice>\n    <callID>N/A</callID>\n    <deviceID>200</deviceID>\n  </callingDevice>\n  <callLinkageData>\n    <globalCallData>\n      <globalCallLinkageId>N/A</globalCallLinkageId>\n    </globalCallData>\n  </callLinkageData>\n</MakeCallResponse>\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"get-access-to-uni-tel-csta-tcp-api",children:"Get access to uni-tel CSTA TCP API"}),"\n",(0,i.jsxs)(n.p,{children:["If you want to know more, feel free to contact us ",(0,i.jsx)(n.a,{href:"https://uni-tel.dk/kontakt-uni-tel/",children:"here"}),". The contact form is in Danish only, but inquiries in English are most welcome."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);