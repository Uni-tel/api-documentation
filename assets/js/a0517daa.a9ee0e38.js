"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[69],{3954:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"csta-api/csta-overview","title":"CSTA overview","description":"Computer-supported telecommunications applications (CSTA) is an abstraction layer for telecommunications applications. It is independent of underlying protocols. It has a telephone device model that enables CTI applications to work with a wide range of telephone devices. Originally developed in 1992, it has continued to be developed and refined over the years. It is often the model that most CTI applications are built on and claim compliance with. It became an OSI standard in July 2000. It is currently being maintained by ECMA International.","source":"@site/docs/csta-api/csta-overview.md","sourceDirName":"csta-api","slug":"/csta-api/csta-overview","permalink":"/api-documentation/docs/csta-api/csta-overview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/api-documentation/docs/overview"},"next":{"title":"CSTA SignalR client API","permalink":"/api-documentation/docs/csta-api/csta-signalr-json"}}');var s=n(4848),r=n(8453);const d={sidebar_position:1},a="CSTA overview",l={},c=[{value:"CSTA Specification",id:"csta-specification",level:2},{value:"Use cases",id:"use-cases",level:2},{value:"The Basics",id:"the-basics",level:2},{value:"Supported Requests and Events",id:"supported-requests-and-events",level:2},{value:"Requests",id:"requests",level:3},{value:"Login and Monitoring Requests",id:"login-and-monitoring-requests",level:4},{value:"Call Requests",id:"call-requests",level:4},{value:"State Requests",id:"state-requests",level:4},{value:"Events",id:"events",level:3}];function o(e){const t={a:"a",admonition:"admonition",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"csta-overview",children:"CSTA overview"})}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsx)(t.mdxAdmonitionTitle,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Computer-supported_telecommunications_applications",children:"wikipedia"})}),(0,s.jsx)(t.p,{children:"Computer-supported telecommunications applications (CSTA) is an abstraction layer for telecommunications applications. It is independent of underlying protocols. It has a telephone device model that enables CTI applications to work with a wide range of telephone devices. Originally developed in 1992, it has continued to be developed and refined over the years. It is often the model that most CTI applications are built on and claim compliance with. It became an OSI standard in July 2000. It is currently being maintained by ECMA International."}),(0,s.jsx)(t.p,{children:"The core of CSTA is a normalized Call Control model. Additional to the core there are Call Associated features and Physical Device features amongst others. An implementation of the standard need not provide all features, and so Profiles are provided. For example, the Basic Telephony profile provides such features as Make Call, Answer and Clear Connection."})]}),"\n",(0,s.jsx)(t.h2,{id:"csta-specification",children:"CSTA Specification"}),"\n",(0,s.jsxs)(t.p,{children:["Link to the ",(0,s.jsx)(t.a,{href:"https://www.ecma-international.org/wp-content/uploads/ECMA-323_6th_edition_december_2011.pdf",children:"CSTA Standard"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"From a CRM system, a button click makes a call to a contact. Written in JavaScript/frontend using SignalR."}),"\n",(0,s.jsx)(t.li,{children:"From a CRM system, a button click makes a call to a contact. Written in .NET C#/backend using SignalR."}),"\n",(0,s.jsx)(t.li,{children:"A Web app that implements a PBX."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"the-basics",children:"The Basics"}),"\n",(0,s.jsx)(t.p,{children:"If you are completely new to CSTA, here is a very short introduction:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Choose one of the the provided APIs and Authenticate (SignalR or TCP)."}),"\n",(0,s.jsx)(t.li,{children:"Setup listeners on each type of event you want to receive. MonitorStartedEvent, DeliveredEvent, EstablishedEvent and ConnectionClearedEvent covers the basics."}),"\n",(0,s.jsx)(t.li,{children:"Request to monitor specific devices via MonitorStart or the entire trunk via MonitorTrunk."}),"\n",(0,s.jsx)(t.li,{children:"Request a new call via MakeCall."}),"\n",(0,s.jsx)(t.li,{children:"Request to end the call via ClearConnection."}),"\n",(0,s.jsx)(t.li,{children:"You've now made a basic setup and made your first call!"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"supported-requests-and-events",children:"Supported Requests and Events"}),"\n",(0,s.jsx)(t.h3,{id:"requests",children:"Requests"}),"\n",(0,s.jsx)(t.p,{children:"The CSTA Standard supports many different requests. It can be a request for an action against a device or for the CSTA API itself."}),"\n",(0,s.jsx)(t.h4,{id:"login-and-monitoring-requests",children:"Login and Monitoring Requests"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Request"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"StartApplicationSession"}),(0,s.jsx)(t.td,{children:"Used to log in and authenticate incoming client connection."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MonitorStart"}),(0,s.jsx)(t.td,{children:"Used to inform the API that the client wishes to receive CSTA events for the given device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MonitorTrunk"}),(0,s.jsx)(t.td,{children:"Used to inform the API that the client wishes to receive CSTA events on a given trunk."})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"call-requests",children:"Call Requests"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Request"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MakeCall"}),(0,s.jsx)(t.td,{children:"Requesting a call to be made between to devices."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ConsultationCall"}),(0,s.jsx)(t.td,{children:"Requesting an attended transfer to another device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ReconnectCall"}),(0,s.jsx)(t.td,{children:"Requesting to cancel the attended transfer currently in progress."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DirectedPickupCall"}),(0,s.jsx)(t.td,{children:"Requesting to pickup a call from another ringing device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SingleStepTransferCall"}),(0,s.jsx)(t.td,{children:"Requesting a blind transfer to another device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ClearConnection"}),(0,s.jsx)(t.td,{children:"Terminate the call on a given device or queue."})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"state-requests",children:"State Requests"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Request"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SnapShotDevice"}),(0,s.jsx)(t.td,{children:"Returns the state of the requested device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GetDoNotDisturb"}),(0,s.jsx)(t.td,{children:"Returns Do-Not-Disturb of the requested device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SetDoNotDisturb"}),(0,s.jsx)(t.td,{children:"Updates Do-Not-Disturb on the requested device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GetForwarding"}),(0,s.jsx)(t.td,{children:"Returns the current Forwarding rules of the requested device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SetForwarding"}),(0,s.jsx)(t.td,{children:"Updates the Forwarding rules on the requested device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GetQueue"}),(0,s.jsx)(t.td,{children:"Returns the queue name on the requested queue."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GetQueueMember"}),(0,s.jsx)(t.td,{children:"Returns all queue members on the requested queue."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"SetQueueMember"}),(0,s.jsx)(t.td,{children:"Updates a specific queue member on a queue"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"events",children:"Events"}),"\n",(0,s.jsx)(t.p,{children:"The CSTA Standard supports many different events. Events inform the client on state changes on devices or queues."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Event"}),(0,s.jsx)(t.th,{children:"Related to"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MonitorStartedEvent"}),(0,s.jsx)(t.td,{children:"Devices, queues"}),(0,s.jsx)(t.td,{children:"Fired when monitoring of a device or queue has been registered in the system."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ConnectionClearedEvent"}),(0,s.jsx)(t.td,{children:"Devices, queues"}),(0,s.jsx)(t.td,{children:"Fired when a call has been terminated for the given device or queue."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DeliveredEvent"}),(0,s.jsx)(t.td,{children:"Devices, queues"}),(0,s.jsx)(t.td,{children:"Fired when a call has been delivered to a device or queue."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"EstablishedEvent"}),(0,s.jsx)(t.td,{children:"Devices"}),(0,s.jsx)(t.td,{children:"Fired when a call has been established on the given device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"TransferedEvent"}),(0,s.jsx)(t.td,{children:"Devices"}),(0,s.jsx)(t.td,{children:"Fired when a call has been established on the given device."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DoNotDisturbEvent"}),(0,s.jsx)(t.td,{children:"Devices"}),(0,s.jsx)(t.td,{children:"Fired when Do-Not-Disturb has been updated on a given device in the system."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ForwardingEvent"}),(0,s.jsx)(t.td,{children:"Devices"}),(0,s.jsx)(t.td,{children:"Fired when Forwarding has been updated on a given device in the system."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"QueueMemberEvent"}),(0,s.jsx)(t.td,{children:"Queues"}),(0,s.jsx)(t.td,{children:"Fired when a queue member has been updated on a given queue in the system."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"QueueAddedEvent"}),(0,s.jsx)(t.td,{children:"Queues"}),(0,s.jsx)(t.td,{children:"Fired when a queue has been added on a given trunk in the system."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"QueueRemovedEvent"}),(0,s.jsx)(t.td,{children:"Queues"}),(0,s.jsx)(t.td,{children:"Fired when a queue has been removed from a given trunk in the system."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>a});var i=n(6540);const s={},r=i.createContext(s);function d(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);