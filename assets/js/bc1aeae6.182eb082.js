"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[222],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},706:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},c="CSTA TCP client",l={unversionedId:"csta-api/csta-tcp-xml-api",id:"csta-api/csta-tcp-xml-api",title:"CSTA TCP client",description:"This API uses XML over TCP like a classic physical telephony server. The client can be written in any",source:"@site/docs/csta-api/csta-tcp-xml-api.md",sourceDirName:"csta-api",slug:"/csta-api/csta-tcp-xml-api",permalink:"/api-documentation/docs/csta-api/csta-tcp-xml-api",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CSTA overview",permalink:"/api-documentation/docs/csta-api/csta-overview"},next:{title:"CSTA SignalR client",permalink:"/api-documentation/docs/csta-api/csta-signalr-json"}},p=[{value:"How to use",id:"how-to-use",children:[],level:2},{value:"Use case",id:"use-case",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"csta-tcp-client"},"CSTA TCP client"),(0,i.kt)("p",null,"This API uses XML over TCP like a classic physical telephony server. The client can be written in any\nprogramming language that supports creating a TCP socket."),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("p",null,"To use this API open a TCP socket. Then send CSTA request by sending the XML (as a string) to the socket.\nCSTA request responses and CSTA events are received as strings from the TCP socket. You need to split up\nthe received text into XML document strings and then deserialized into a typed object if needed."),(0,i.kt)("h2",{id:"use-case"},"Use case"),(0,i.kt)("p",null,"This example connects to the CSTA server and then sends a MakeCall request. Local number 200 calls 69102201."),(0,i.kt)("p",null,"Send TCP string:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="Connect to CSTA server"',title:'"Connect',to:!0,CSTA:!0,'server"':!0},'<?xml version="1.0" encoding="utf-16"?>\n<StartApplicationSession>\n  <applicationInfo>\n    <applicationSpecificInfo>\n      <vendorData:userID>bill@uni-tel.dk</vendorData:userID>\n        <vendorData:password>*******<vendorData:password>\n        <vendorData:pbxDomain>69102201.pbx.one-connect.dk</vendorData:pbxDomain>\n      </applicationSpecificInfo>\n    </applicationInfo>\n  <requestedSessionDuration>120</requestedSessionDuration>\n</StartApplicationSession>\n')),(0,i.kt)("p",null,"Wait for a response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="Connect to CSTA server response"',title:'"Connect',to:!0,CSTA:!0,server:!0,'response"':!0},'<StartApplicationSessionPosResponse xmlns="http://www.ecma.ch/standards/ecma-323/csta/ed6">\n  <sessionID>HotFShcrHZWUfc6tMIjD0A</sessionID>\n  <actualProtocolVersion>http://www.ecma.ch/standards/ecma-323/csta/ed6</actualProtocolVersion>\n  <actualSessionDuration>120</actualSessionDuration>\n</StartApplicationSessionPosResponse>\n')),(0,i.kt)("p",null,"Send TCP string:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="MakeCall request"',title:'"MakeCall','request"':!0},"<MakeCall>\n  <callingDevice>200</callingDevice>\n  <calledDirectoryNumber>69102201</calledDirectoryNumber>\n  <autoOriginate>doNotPrompt</autoOriginate>\n  <privateData>\n    <requestID>155-a04dbfd1-ec67-4637-93b8-8248f13fe691</requestID>\n  </privateData>\n</MakeCall>\n")),(0,i.kt)("p",null,"Wait for a response like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="MakeCall response"',title:'"MakeCall','response"':!0},'<MakeCallResponse xmlns="http://www.ecma.ch/standards/ecma-323/csta/ed6">\n  <privateData>\n    <requestID>155-a04dbfd1-ec67-4637-93b8-8248f13fe691</requestID>\n  </privateData>\n  <callingDevice>\n    <callID>N/A</callID>\n    <deviceID>200</deviceID>\n  </callingDevice>\n  <callLinkageData>\n    <globalCallData>\n      <globalCallLinkageId>N/A</globalCallLinkageId>\n    </globalCallData>\n  </callLinkageData>\n</MakeCallResponse>\n\n')))}d.isMDXComponent=!0}}]);