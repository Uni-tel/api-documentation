"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[431],{4372:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"getting-started/client","title":"Connecting to the API","description":"1. Open a TCP socket.","source":"@site/docs/getting-started/client.md","sourceDirName":"getting-started","slug":"/getting-started/client","permalink":"/api-documentation/docs/getting-started/client","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction to CSTA","permalink":"/api-documentation/docs/getting-started/csta"},"next":{"title":"Use cases","permalink":"/api-documentation/docs/use-cases/"}}');var s=t(4848),r=t(8453);const o={sidebar_position:2},a="Connecting to the API",c={},d=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"connecting-to-the-api",children:"Connecting to the API"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Open a TCP socket."}),"\n",(0,s.jsx)(n.li,{children:"Authentication: Login by sending a CSTA StartApplicationSession request in XML format (as a string) to the socket."}),"\n",(0,s.jsx)(n.li,{children:"CSTA request, responses and CSTA events are received as strings from the TCP socket. You need to split up the received text into XML document strings and then deserialized into a typed object if needed."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["The TCP client support XML requests, responses and events. They follow the CSTA format in the ",(0,s.jsx)(n.a,{href:"https://www.ecma-international.org/wp-content/uploads/ECMA-323_6th_edition_december_2011.pdf",children:"ECMA-323 CSTA Standard"}),"."]})}),"\n",(0,s.jsx)(n.h1,{id:"net-sample-client",children:".NET Sample Client"}),"\n",(0,s.jsxs)(n.p,{children:["This sample client is written in C# .NET using the ",(0,s.jsx)(n.a,{href:"https://github.com/chronoxor/NetCoreServer",children:"NetCoreServer"})," library available at nuget."]}),"\n",(0,s.jsx)(n.p,{children:"It provides the basis for setting up a TCP client, so you can begin communication with the Uni-tel CSTA API via TCP."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class TcpClient : NetCoreServer.TcpClient\n{\n    private const string MESSAGE_TERMINATOR = "\\0";\n\n    private readonly Action<object> _newMessageFunc;\n    private readonly Serializer _serializer;\n    private string _dataReceived = string.Empty;\n\n    public TcpClient(Action<object> newMessageFunc, string address, int port) : base(address, port)\n    {\n        _newMessageFunc = newMessageFunc;\n        _serializer = new Serializer();\n    }\n\n    public void SendAsync<T>(T message)\n    {\n        Console.WriteLine($"Sending {message.GetType()} message ");\n\n        base.SendAsync(_serializer.Serialize(message) + MESSAGE_TERMINATOR);\n    }\n\n    protected override void OnConnected()\n    {\n        Console.WriteLine($"TcpClient connected");\n\n        ReceiveAsync();\n\n        base.OnConnected();\n    }\n\n    protected override void OnDisconnected()\n    {\n        Console.WriteLine($"TcpClient disconnected");\n\n        base.OnDisconnected();\n    }\n\n    protected override void OnReceived(byte[] buffer, long offset, long size)\n    {\n        var chunk = Encoding.UTF8.GetString(buffer, (int)offset, (int)size);\n        _dataReceived += chunk;\n\n        while (_dataReceived.Contains(MESSAGE_TERMINATOR))\n        {\n            var index = _dataReceived.IndexOf(MESSAGE_TERMINATOR, StringComparison.Ordinal);\n            var message = _dataReceived.Substring(0, index);\n            _dataReceived = _dataReceived.Substring(index + 1);\n\n            try\n            {\n                var convertedMessage = _serializer.Deserialize(message);\n                _newMessageFunc(convertedMessage);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Invalid XML document? Exception: {ex.Message}. XML = {message}");\n            }\n        }\n    }\n\n    protected override void OnError(SocketError error)\n    {\n        Console.WriteLine($"TCP client returned error code: \'{error}\'");\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);