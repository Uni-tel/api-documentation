"use strict";(self.webpackChunkdocusaurus_classic_typescript=self.webpackChunkdocusaurus_classic_typescript||[]).push([[821],{8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>l});var i=t(6540);const o={},s=i.createContext(o);function a(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(s.Provider,{value:e},n.children)}},8667:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"csta-api/csta-signalr-json","title":"CSTA SignalR client API","description":"It\'s recommended to use the SignalR API for new development, if your programming language support SignalR.","source":"@site/docs/csta-api/csta-signalr-json.md","sourceDirName":"csta-api","slug":"/csta-api/csta-signalr-json","permalink":"/api-documentation/docs/csta-api/csta-signalr-json","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"CSTA overview","permalink":"/api-documentation/docs/csta-api/csta-overview"},"next":{"title":"CSTA TCP client API","permalink":"/api-documentation/docs/csta-api/csta-tcp-xml-api"}}');var o=t(4848),s=t(8453);const a={sidebar_position:2},l="CSTA SignalR client API",c={},r=[{value:"Clients",id:"clients",level:2},{value:"How to use",id:"how-to-use",level:2},{value:".NET sample client",id:"net-sample-client",level:2},{value:"Use Case",id:"use-case",level:3},{value:"TypeScript ES6 sample client",id:"typescript-es6-sample-client",level:2},{value:"Use Case",id:"use-case-1",level:3},{value:"Get access to uni-tel CSTA SignalR API",id:"get-access-to-uni-tel-csta-signalr-api",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"csta-signalr-client-api",children:"CSTA SignalR client API"})}),"\n",(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsx)(e.p,{children:"It's recommended to use the SignalR API for new development, if your programming language support SignalR."})}),"\n",(0,o.jsx)(e.h2,{id:"clients",children:"Clients"}),"\n",(0,o.jsxs)(e.p,{children:["SignalR is a modern two-way communication that support multiple transport technologies, ideally using WebSocket. A thorough guide can be found in Microsoft's own documentation ",(0,o.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/aspnet/signalr/",children:"here"}),"."]}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"Technology"}),(0,o.jsx)(e.th,{children:"Package"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:".NET"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.a,{href:"https://www.nuget.org/packages/Microsoft.AspNetCore.SignalR.Client",children:"Microsoft.AspNetCore.SignalR.Client"})})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"JavaScript"}),(0,o.jsx)(e.td,{children:(0,o.jsx)(e.a,{href:"https://www.npmjs.com/package/@microsoft/signalr",children:"@microsoft/signalr"})})]})]})]}),"\n",(0,o.jsx)(e.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,o.jsx)(e.admonition,{type:"tip",children:(0,o.jsxs)(e.p,{children:["The SignalR client support JSON requests, responses and events. They follow the CSTA format in the ",(0,o.jsx)(e.a,{href:"https://www.ecma-international.org/wp-content/uploads/ECMA-323_6th_edition_december_2011.pdf",children:"ECMA-323 CSTA Standard"}),", but are supported in JSON instead of XML."]})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"SignalR hub: Instantiate a client class and connect"}),"\n",(0,o.jsx)(e.li,{children:"Authentication: Login using CSTA StartApplicationSession request"}),"\n",(0,o.jsx)(e.li,{children:"Call other CSTA methods on the client to interact with your hosted pbx"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"net-sample-client",children:".NET sample client"}),"\n",(0,o.jsx)(e.p,{children:"The C# sample client is written for .NET Core 6, but should be backwards compatible to older ASP.NET Core versions."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-csharp",children:'using Microsoft.AspNetCore.SignalR.Client;\nusing Microsoft.Extensions.Options;\nusing Unitel.Csta.Standard.Events;\nusing Unitel.Csta.Standard.Requests;\n\nnamespace Unitel.Csta.SignalR.TestClient\n{\n    public class SignalRClient\n    {\n        private readonly ILogger<SignalRClient> _logger;\n        private readonly string _uri;\n\n        private HubConnection _connection;\n\n        delegate void NotifyClientConnectionDelegate<T>(T message);\n        \n        public event NotifyClientConnectionDelegate<ConnectionClearedEvent> NotifyOnConnectionClearedEvent;\n        public event NotifyClientConnectionDelegate<DeliveredEvent> NotifyOnDeliveredEvent;\n        public event NotifyClientConnectionDelegate<EstablishedEvent> NotifyOnEstablishedEvent;\n\n        public event NotifyClientSignalRClosed NotifySignalRClosed;\n\n        public SignalRClient(ILogger<SignalRClient> logger)\n        {\n            _logger = logger;\n            _uri = "GATEWAY_API" + "/csta";\n            _connection = new HubConnectionBuilder().WithUrl(new Uri(_uri)).Build();\n        }\n\n        public async Task Start()\n        {\n            SetupSignalRConnectionEventListeners();\n            SetupCstaEventListeners();\n\n            try\n            {\n                _logger.LogDebug($"SignalR client connecting...");\n\n                if (_connection.State == HubConnectionState.Disconnected)\n                {\n                    await _connection.StartAsync();\n                }\n                else\n                {\n                    _logger.LogDebug($"SignalR client already connected.");\n                }\n            }\n            catch (Exception e)\n            {\n                _logger.LogError(e, $"Failed to start SignalR client, {e.Message}");\n                NotifySignalRClosed();\n                throw;\n            }\n        }\n\n        public async Task Stop()\n        {\n            try\n            {\n                _logger.LogDebug($"SignalR client shutting down...");\n                if (_connection != null)\n                {\n                    await _connection.StopAsync();\n                    await _connection.DisposeAsync();\n                    _connection = null;\n                }\n            }\n            catch (Exception e)\n            {\n                _logger.LogError(e, $"Failed to stop SignalR client, {e.Message}");\n                throw;\n            }\n        }\n\n        public async Task<StartApplicationSessionPosResponse> StartApplicationSession(StartApplicationSession request)\n        {\n            return await _connection.InvokeAsync<StartApplicationSessionPosResponse>("StartApplicationSession", request);\n        }\n        \n        public async Task<MonitorStartResponse> MonitorStart(MonitorStart request)\n        {\n            return await _connection.InvokeAsync<MonitorStartResponse>("MonitorStart", request);\n        }\n\n        public async Task<MakeCallResponse> MakeCall(MakeCall request)\n        {\n            return await _connection.InvokeAsync<MakeCallResponse>("MakeCall", request);\n        }\n\n        public async Task<ClearConnectionResponse> ClearConnection(ClearConnection request)\n        {\n            return await _connection.InvokeAsync<ClearConnectionResponse>("ClearConnection", request);\n        }\n\n        private void SetupCstaEventListeners()\n        {\n            _connection.On<ConnectionClearedEvent>("ConnectionCleared", (message) =>\n            {\n                NotifyOnConnectionClearedEvent(message);\n                _logger.LogDebug($"ConnectionClearedEvent");\n            });\n\n            _connection.On<DeliveredEvent>("Delivered", (message) =>\n            {\n                NotifyOnDeliveredEvent(message);\n                _logger.LogDebug($"DeliveredEvent");\n            });\n\n            _connection.On<EstablishedEvent>("Established", (message) =>\n            {\n                NotifyOnEstablishedEvent(message);\n                _logger.LogDebug($"EstablishedEvent");\n            });\n        }\n\n        private void SetupSignalRConnectionEventListeners()\n        {\n            _connection.Closed += error =>\n            {\n                _logger.LogInformation("SignalR Client connection closed.");\n\n                NotifySignalRClosed();\n\n                return Task.CompletedTask;\n            };\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"use-case",children:"Use Case"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-csharp",children:'class Test \n{\n\n  public void ExecuteTest() \n  {\n    var client = new CstaClient();\n    client.NotifySignalRClosed += () => { _logger.LogInformation("Connection closed"); };\n    client.NotifyOnEvent += (e) => { _logger.LogInformation("Event received"); };\n\n    await client.Start();\n\n    await client.StartApplicationSession(CreateStartApplicationSessionRequest());\n    await client.MakeCall(CreateMakeCallRequest("222", "333"))\n  }\n\n  private StartApplicationSessionRequest CreateStartApplicationSessionRequest()\n  {\n      return new StartApplicationSessionRequest\n      {\n          ApplicationInfo = new ApplicationInfo\n          {\n              ApplicationSpecificInfo = new ApplicationSpecificInfo\n              {\n                  UserId = "username",\n                  Password = "password",\n                  PbxDomain = "pbxDomain"\n              }\n          }\n      };\n  }\n\n  private MakeCallRequest CreateMakeCallRequest(string callerId, string calleeId)\n  {\n      return new MakeCallRequest\n      {\n          CallingDevice = callerId,\n          CalledDirectoryNumber = calleeId,\n          PrivateData = new RequestResponsePrivateData\n          {\n              RequestId = Guid.NewGuid().ToString(),\n          }\n      };\n  }\n}\n\n\n'})}),"\n",(0,o.jsx)(e.h2,{id:"typescript-es6-sample-client",children:"TypeScript ES6 sample client"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:'class CstaClient {\n  connection!: HubConnection;\n\n  async connect(): Promise<void> {\n    this.connection = new HubConnectionBuilder().withUrl(GATEWAY_API).build();\n    await this.connection.start();\n    console.log("Connected to csta gateway");\n  }\n\n  async disconnect(): Promise<void> {\n    await this.connection.stop();\n  }\n\n  async startApplicationSession(username: string, password: string, pbxDomain: string) {\n    const response = await this.connection.invoke("StartApplicationSession", {\n      applicationInfo: {\n        applicationSpecificInfo: {\n          "vendorData:userID": username,\n          "vendorData:password": password,\n          "vendorData:pbxDomain": pbxDomain,\n        },\n      },\n      requestedSessionDuration: 120,\n    });\n    console.log(response);\n  }\n\n  async monitorStart(trunkId: string, deviceId: string): Promise<void> {\n    const response = await this.connection.invoke("MonitorStart", {\n      monitorObject: { deviceObject: "u-" + trunkId + "-" + deviceId },\n    });\n    console.log("MonitorStart response", response);\n  }\n\n  async makeCall(callingDevice: string, calledDirectoryNumber: string): Promise<void> {\n    const response = await this.connection.invoke("MakeCall", {\n      callingDevice: callingDevice,\n      calledDirectoryNumber: calledDirectoryNumber,\n    });\n    console.log("MakeCall Response", response);\n  }\n\n  async clearConnection(callId: string): Promise<void> {\n    const response = await this.connection.invoke("ClearConnection", {\n        connectionToBeCleared: {\n          callId: callId,\n        },\n        privateData: {\n          requestId: "request-clearconnection-" + callId,\n        },\n      });\n\n    console.log("ClearConnection Response", response);\n  }\n\n  subscribeToEvents(): void {\n    this.connection.on("Delivered", (e: DeliveredEvent) => {\n      console.log("Delivered", e);\n    });\n\n    this.connection.on("Established", (e: EstablishedEvent) => {\n      console.log("Established", e);\n    });\n\n    this.connection.on("ConnectionCleared", (e: ConnectionClearedEvent) => {\n      console.log("ConnectionCleared", e);\n    });\n  }\n}\n\nexport default new CstaClient();\n'})}),"\n",(0,o.jsx)(e.h3,{id:"use-case-1",children:"Use Case"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:'const client = new CstaClient();\nawait client.connect();\nawait client.startApplicationSession("username", "password", "pbxDomain");\nawait client.makeCall("22334455", "333");\n'})}),"\n",(0,o.jsx)(e.h2,{id:"get-access-to-uni-tel-csta-signalr-api",children:"Get access to uni-tel CSTA SignalR API"}),"\n",(0,o.jsxs)(e.p,{children:["If you want to know more, feel free to contact us ",(0,o.jsx)(e.a,{href:"https://uni-tel.dk/kontakt-uni-tel/",children:"here"}),". The contact form is in Danish only, but inquiries in English are most welcome."]})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);